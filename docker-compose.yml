version: '3.8'

services:
  # Servicio de Autenticación
  auth:
    build:
      context: ./auth-service
    container_name: crm_auth
    restart: unless-stopped
    environment:
      - NODE_ENV=production # Cambiamos a production para el despliegue
      - DATABASE_URL=postgres://consilium_user:supersecretpassword@crm_db:5432/consilium_db
      - PORT=3000
    depends_on:
      db:
        # LÍNEA MODIFICADA: Ahora 'auth' esperará a que 'db' esté saludable
        condition: service_healthy
    networks:
      # Lo conectamos a ambas redes
      - proxy-net
      - crm-internal

  # Base de Datos PostgreSQL
  db:
    image: postgis/postgis:15-3.4
    container_name: crm_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=consilium_user
      - POSTGRES_PASSWORD=supersecretpassword
      - POSTGRES_DB=consilium_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      # La DB solo necesita estar en la red interna
      - crm-internal
    # NUEVA SECCIÓN: La prueba de salud
    healthcheck:
      # pg_isready es una utilidad de postgres para comprobar si el servidor está aceptando conexiones
      test: ["CMD-SHELL", "pg_isready -U consilium_user -d consilium_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:

# Definición de nuestras redes
networks:
  # La red externa para NGINX Proxy Manager
  proxy-net:
    external: true
  # NUEVA RED: Nuestra red interna privada para la comunicación entre servicios
  crm-internal:
    driver: bridge
