version: '3.8'

services:
  auth:
    container_name: crm_auth
    build:
      # El contexto es el directorio raíz (donde está este archivo).
      context: .
      # La ruta explícita al Dockerfile que debe usar.
      dockerfile: ./auth-service/Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://consilium_user:supersecretpassword@crm_db:5432/consilium_db
      - PORT=3000
    depends_on:
      db:
        # LÍNEA MODIFICADA: Ahora 'auth' esperará a que 'db' esté saludable
        condition: service_healthy
    networks:
      # Lo conectamos a ambas redes
      - proxy-net
      - crm-internal

  db:
    image: postgis/postgis:15-3.4
    container_name: crm_db
    restart: unless-stopped
    environment:
      - POSTGUS_USER=consilium_user
      - POSTGRES_PASSWORD=supersecretpassword
      - POSTGRES_DB=consilium_db
    # SECCIÓN DE VOLÚMENES PARA LA BASE DE DATOS (ESTA ES LA CORRECTA)
    volumes:
      # Este volumen guarda los datos de la BD de forma persistente
      - pgdata:/var/lib/postgresql/data
      # Este volumen ejecuta nuestro script para crear las tablas la primera vez
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crm-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U consilium_user -d consilium_db"]
      interval: 10s
      timeout: 5s
      retries: 5

# CLAVE: Definimos el volumen 'pgdata' para que Docker lo gestione
volumes:
  pgdata:

networks:
  proxy-net:
    external: true
  crm-internal:
    driver: bridge
